javacript:

(1) Makes the page Interactive
(2) is very fast -JS runs on clinet Macchine
(3) there is no compilavtions and no dependency oon the server in the Backend
(4) Interprter

Java Not Equal to javacript ,they are no way related

       java/c#              |             javacript
                            |            
(1) Compiler                |             Interprter
(2) A Backend language      |             a frontENd language
(3) server Involved         |             no server Involved


(1) A programer writes code in a programming language (high level)
(2) the programer code is converted then gets to machine code (low level)(0's and 1's)


George Boole ---  0 and 1
Compiler: reads the entire code and converts it as a whole chunk to the machine code at once 
               - if your code has problems, gets detected early and code will not Compiler
               - it is a slow process

Interprter: Reads one line of code at a time and converts it into machine code
            -Even if your code has issues, you can still see the output till Interprter reaches to the bad code
            -It is a Fast Process



/********************* Variable in javacript ***************************************/

Variable: name given to memory location Temporarily 

Variable can be created using the following Keywords
   1  var  :- 
         Console.log(num1); undefine -hosting

         var num1 = 10;
         console.log(num1);
         num1 = 15; // No error
         console.log(num1);

         1. access the variable before initialization, no error
         2. can re-assign the value(mutable)
         3. it has a functional scope

 -----------------------------------------------------------------------------------------
   2  let  :-

    Console.log(num2);   :-  Uncaugth Reference : cannot access 'num3'

         let num2 = 20;
         console.log(num2);
         num2 = 25;   // No error   -> we can chnage value after initialization
         console.log(num2);

         1. access the variable before initialization,  error
         2. can re-assign the value(mutable)
         3. it has a block scope


-------------------------------------------------------------------------------------------
 3  const  :-

    Console.log(num3);   :-  Uncaugth Reference : cannot access 'num3'

         let num3 = 20;
         console.log(num3);
         num3 = 25;        // Uncaugth TypeError : Assignment to constant variable
         console.log(num3);

         1. cannot access the variable before initialization, ERROR
         2. cannnot re-assign the value (immutable)
         3. it has a block scope


/********************Example****************************/

var num=[10,"React",true,102.2];
  console.log(num[2])
   -> true    //Output

/****************Datatype in javacript******************/

Datatype: type of data  a var can hold

(1) Primitive Datatype 
       -Number (digits ,integer,float,decimal)
       -string(char,varchar,string)
       -boolean(true:1 false:0)
(2)  refrence Datatype
      -Arrray :contigous location of memory holding the  data
      -function (classes)
      -object
(3)  other Data types
       -undefined:Variable whose value is not defined
       -null: empty object

/****************************** Datatypes in js ***********************/
typeof it return data type;

  var numDT1 = 20;
  console.log(typeof numDT1); // Number

  var numDT2 = 20.455;
  console.log(typeof numDT2); // Number

  var numDT3 = "234";
  console.log(typeof numDT3); // string

  var numDT4 = "Shubham";
  console.log(typeof numDT4); // string

  var numDT5 = true;
  console.log(typeof numDT5); // boolean

  var numDT6 = false;
  console.log(typeof numDT6); // boolean

  var undDT7 = undefine;
  console.log(typeof undDT7); // undefine

  var nullDT8= null;
  console.log(typeof undDT7); // null



/******************************* Operators  in javacript *******************/
(1) Arithmetic operators
   a.+:    adds Number
   b.-:    substracts Number
   c. *:   Multiplcates Number
   d. /:  divides two Number
   e. %:  it gives the remainder of a division operators
   g.  increment
        i. post increment
        ii.pre increment
   h.  decrement 
        i.post decrement
        ii.pre decrement

(2)  Assignment operators
    a.  = used to assign a value
    b.   concise way of representation


(3)  Comparsion operators
      a. == it compares the data value on both sides and not the ddata types
      b. ===  it compares the data value on both sides as well as the data types

          Example:- var num = "10";
                    var num1=  10;
                    console.log(num==num1);
                    console.log(num===num1);
                    ------------------------------------
                    true
                    false

      c . check the rest in PPT


(4)   Logical operators
       a.&& it checks the condition on both side ,if both are true ,then it returns true
       b .|| it checks the condition on both side ,if eithe one of them is true,then it will returns true
       c . ! it gives you a negation /inversion of the valur
       

/******************************  Operators in Javascript Example   **************************************
Arithmatic Operator

  (+) operation

  var num1 = 15;
  var num2 = 5;
  var num3 = num1 + num2;
  console.log(num3);  // 20

   (-) operation
  
  var num1 = 15;
  var num2 = 5;
  var num3 = num1 - num2;
  console.log(num3);  // 10

   (*) operation
  
  var num1 = 5;
  var num2 = 5;
  var num3 = num1 * num2;
  console.log(num3);  // 25

   (/) operation --> gives remainder
  
  var num1 = 15;
  var num2 = 5;
  var num3 = num1 / num2;
  console.log(num3);  // 3

   (%) operation  --> gives quotient
  
  var num1 = 15;
  var num2 = 5;
  var num3 = num1 % num2;
  console.log(num3);  // 0

   (++) operation  --> post increment
  
  var num1 = 15;
  var a = num1++;
  console.log(a);  // 16

   (++) operation --> pre increment
  
  var num1 = 15;
  var a = ++num1;
  console.log(a);  // 16
------------------------------------------------>

#Assignment Operators ;

   var x = 10;
   var y = 20;

    x = x + 1; // 11
    x += 1;   // 12

    y = y - 1; // 19
    y -= 1;   // 18

    x = x * 2; // 20
    x *= 2;   // 40
 -------------------------------------------->
#Comparsion operation

    var num1 = 10;
    var num2 = "10";
 
   (==)
    if(num1 == num2){
       console.log('both are equal');
    }else{
       console.log('Not equal');
    }
    -> true = both are equal;

   (===)
    if(num1 === num2){
       console.log('both are equal');
    }else{
       console.log('Not equal');
    }
    -> false = both are not equal;

-------------------------------------------->
#Logical Operators

    var num3 = 10;
    var num4 = "10";
 
  (!==)
    if(num3 !== num4){
       console.log('not equal');
    }else{
       console.log('both are equal');
    }

  (!===)
    if(num3 !=== num4){
       console.log('not equal');
    }else{
       console.log('both are equal');
    }

-----------------------------------------------------
 10-07-2024    

1.Scope ->IMP

var a= 10;                       -> outer scope

function name1(){
   let b = 20;                   -> block scope
   var c = 30;                   -> functional scope

   if (true){
       let d = 40;
       var e = 50;
   }
   console.log(b) :- 20         //bcz it is block scope it is asseable only { -- }
   console.log(c) :- 30         // bcz it is functional scope it is accesable to { function to function }
   console.log(d) :- undefined  // block scope if { ... }                     |
   console.log(e) :- 50         // it is accesable bcz it is functional scope --->----
}

console.log(a)    :- 10         // it is functional Scope Bcz it is not in function as 
                                   well as it is not calling in function 

Lexical Scoping :- outer function call in inner that time it is Lexical scoping

------------------------------------------------------------------------------------------
11-07-2024

1.Output Statements in JS
  -> a. console.log();
     b. document.write();
     c. innerHTML
     d. window.alert;

2.Input Statements In JS 
  -> a. window.confirm : will ask for a boolean (tell me yes or no)
     b. window.prompt : user can enter free text(user can give discriptive inputs)

3.This Keywords:-
     define:- it is refer current context;

         this.session = "Javascript";

    
          this.room ={
              session : "React",
              subject : function(){
                  console.log(`${this.session}`);
                  confirm.log(`${session}`);
              }
          };
          
          let classroom = {
          session : "MERN/Mean",
          subject : function(){
              console.log(`${this.session}`)
              console.log(`${session}`)
         }
         };

          this.room.subject();
          classroom.subject();

      We can't access object which defined by let and const;
      we can only access directly variable name;
      $ is String interpollishn

4. example of this with class 

     class resturentManger{
         restaurentList = [
            {name :"KFC", location:"Rajiv Chowk",city:"Delhi"},
            {name :"Subway", location:"Chandani Chowk",city:"Mumbai"}
            {name :"Dominoz", location:"Mg Road",city:"Banglore"}
         ];
      
          //functionality
            printAllName(){
             this.restaurentList.forEach((dolley) => {
              console.log(dolley.name);
             });
           }
     }

      let obj = new resturentManger();
      obj.printAllName();

      output:- 
      1.KFC
      2.Subway
      3.Dominoz
------------------------------------------------------------------------------------------
12-07-2024

ES5 - no classes in js
ES6 - js introduce classes

this - Keywords is used to refer to the class

Syntax:-
     class <name_of_class>{
        //data members
        //functionalities
     }

1. --??--??--> //without constructor function


    class myClass{
    
       //data members
    
       name = "Rahul";
       roll_No = 21;
       subjects = [
          "Maths",
          "S.St.",
          "Science",
          "English",
          "Hindi"
       ]
    
       //functionalities
    
       printName(){
          console.log(this.name);
       }
    
       addSubject(subject){
          this.subjects.push(subject);
          this.printName();
       }
    
       getAllSubject(){
          return this.subjects;
       }
    }
    
    // to execute the functionalities of the class create an object of that class
    
    var myObj = new myClass();       //it creates a new object of the class
    
    console.log(myObj.name); //"Rahul"
    console.log(myObj.roll_No)
    console.log(myObj.subjects)
    console.log(myObj.addSubject("react"));
    console.log(myObj.getAllSubject());
    
--??--??--> // With constructor function

class myClass{

   //data members
   name;
   rollNo;
   subjects = [
      "Maths",
      "S.St.",
      "Science",
      "English",
      "Hindi"
   ]

   //functionalities
   constructor(_name, _rollNo) {
      this.name = name;
      this.roll_No = _roll_No
   }

   printName(){
      console.log(this.name);
   }

   addSubject(subject){
      this.subjects.push(subject);
      this.printName();
   }

   getAllSubject(){
      return this.subjects;
   }
}

var muObj2 = new myClass("Amit",31);
console.log(myObj2.name);  //"Amit"
console.log(myObj2.rollNo);    // 31

Task:- 1.Display Area --Circle,--Rectangle,--Square,--Triangle; (all-done with no constructor)
       -> using  constructor overloading , method overloading

note :- we cant touch let and const with this Keywords
____________________________ USE STRICT _________________________________
15/07/2024
use strict :- 1.we use the useStrict to make secure code.
                                               ->IMP for interview

If you can attach a context while calling the function:
     a.You need not to assign the context to local variable
     b.you can reuse the same function in various diff context

!.Example:-
-------------------  Code With Error------------------
         'use strict'
         
         this.table = "House table";
         
         const clean = function (){
         console.log(`${this.table} cleaned!!`);
         
         }
         
         clean(); //Error

--------------------  Fixed code ---------------------

         'use strict'
         
         this.table = "House table";
         
         const clean = function (){
         console.log(`${this.table} cleaned!!`);
         
         }
         
         clean.call(this); 

         let obj ={
            table: "Obj table"
         }
         clean.call(obj)
---------------------- Example Code -------------------

     'use strict'
         
         this.table = "House table";
         this.furniture = {
            table : "Class Tables"
         }
         
         const clean = function (){
         console.log(`${this.table} cleaned!!`);
         
         }
         
         clean.call(this); 

         let obj ={
            table: "Obj table"
         }
         clean.call(obj)
         clean.call(furniture);

   ------------------- Passing Parameter in Call Function--------------------------
    'use strict'
         
         this.table = "House table";

         
         
         const clean = function (name , name2, nam3){
         console.log(`${this.table} cleaned by ${name}!!`);
         }
         // clean();            -> give error comment it

         clean.call(this, "Ritvi","Adesh","Rakesh");

         let obj = {
            table : "Obj Table"
         }

         clean.call(obj, "Raju")

in this we see :- 1.'Use Strict'
                  2.'call()'    string
                  
______________________________  __________________________________

16-07-2024

-------------------------- rest operator apply()  ----------------------
'use strict'

  this.num =10;     //var

  const sum = ( ...paramsArray)=> {
    let res =0;
    for (let i=0;i<paramsArray.length;i++) {
      res += paramsArray[i]
    }
    return this.num+res;
  }   
var arrayofParams =[20,30,40,50,60,70];
var result = sum.apply(this, arrayofParams);
console.log(result)
----------------------------------------------------------------------------

clean():- pass context simple Parameter pass that time we go clean function.
apply():- pass context deal with array that time we use apply function.

Sprade(...)& Rest(...)
The Spread operator is used to 'spread' an iterable into its elements,
The Rest operator Syntax allow a function accept an inde

----------------------------------------------------------------------------
@->Example of Bind :-
   1. bind  not execute directly it will wait 
   2. it will need all Parameter if yout not pass all Parameter it give error

      'use strict'

       this.table = "House Table";
         const clean = function(name,name2,name3){
               console.log(`${this.table} cleaned by ${name},${name2} and ${name3} !!`);
         }

       clean.call(this, "Ritvi","Shubham","Mahesh");   //you get an immediate output,clean 
                                                        function will be immediately execute
       var myBindfunction = clean.bind(this, "Ritvi"); //you dont get an immediate output ,clean 
                                                        function will be not executed immediately
       myBindfunction("Adesh", "Rajesh");              //clean function will be executed and you  
                                                        get the output
                                                        
Task :- 1.reverce of a string display :- "Javascript" .
        2. array with serch elements

        created:- reverce-str.html file ->Practise.js
      
---------------------------------------------------------------------------------------
17-07-2024 :- Sir not Avalable
---------------------------------------------------------------------------------------
18-07-2024
Created files :- 

'use strict'

this.table = "window table";

const clean = function(){
   console.log(`${this.table} cleaned !!`);

    const doubleClean = function(){
      console.log(`${this.table} Double cleaned !!`)

      const Tripleclean = function (){
         console.log(`${this.table} Triple cleaned`)
      }
      Tripleclean.call(this);
    }
    doubleClean.call(this);
}
clean.call(this);

-------------->   //Use of Arrow Function <---------------------

this.table = "window table";

const clean = function = () => {
   console.log(`${this.table} cleaned !!`);

    const doubleClean = function(){
      console.log(`${this.table} Double cleaned !!`)

      const Tripleclean = function (){
         console.log(`${this.table} Triple cleaned`)
      }
      Tripleclean(this);
    }
    doubleClean(this);
}
clean(this);

-----------------------\\  Dictionary in JS  //------------------------

-> Dictionary is a key and value pair
-> In JS we create key , value pairs with the help of objects

let obj ={
   name   : "Shubham"
   class  : "javascript"
   school : "V.S.satav highschool"
   rollNo : 001
}
console.log(obj.name);
console.log(obj["school"])

------------------------  \\ Scheduling //   --------------------

(1) timeout - you execute a piace of code only once after a set time out 
        e.g. after 15 minutes I will logout the user 

        setTimeout(()=>{
         //some code
         console.log("inside timeout")
        },5000); //5 seconds

(2) interval - you will execute a piace of code after every set interval
              e.g. in every 3 seconds I will check for a new email

              setInterval(()=>{
               //some code
               console.log("inside interval")
              },3000)  // 3 sec

------------------------  \\ Event Handeling //   --------------------

<button onClick="buttonClickHandler()">
Click Me !!
</button>

<input type="text" onChange="onTextChange(event)">

function buttonClickHandler(){
   alert("Button clicked !!")
}

function onTextChange(event){
   console.log(event.target.value);
}


------------------------  \\ Exception Handeling //   --------------------
try/then {
   //Code which can throw an exception     //Error
   //API call
}catch (exception){
   //another logic on exception
   //Also make another API call to a diff endpoint
     console.log(exception)
}finally{
   //this code  always run
}

try{
   var a = b + 10;
}catch(exception){
   console.log(exception);
}finally{
   console.log("This block always runs");
}

---------------------------- Arrow Function And array ------------------------
23-07-2024

 ---> old es-5 we declare function is :- 

 function name1(){
   // Code in this
 }
 name1();

--> ES-6 introduce arrow Function :-

 function name2 =()=>{

 }
 name2(); // function call


----------- \\ Map Method //-------------
var array =[1,2,3,4,5,6,7];

function mapper(num){
return num * 2;
}
var result = array.map(mapper);
console.log(result)

var result1 = array.map((num)=>{
     return num * 2;
})
console.log(result1)

--------------------\\ For Each //--------------------

var array6 = [1,2,3,4,5,6,7,8];

function multiplyNumber(item){
   return item * 10;
}

var resultarray6 = array6.forEach(multiplyNumber);
console.log(array6);
console.log(resultarray6); // 10,20,30,40,50,60,70,80

----------------------\\  Find //----------------------

var array10 = ["a", "b", "Shubham",1,4,true,null,undefined,{},[]];

function serch(item){
   return item = 'Shubham';
}

var findResult = array10.find(search);

console.log(findResult);

----------------------\\  concat //----------------------

var array7 = ['a','b','c'];

var array8 = [1,2,3];

var array9 = [true,false,true];

array7 = array7.concat(array8,array9)

console.log(array7)

----------------------\\  sort-array //----------------------

var array12 = [3,6,8,4,6,10,,34,34,87,54,89,14,98]

function sortArray(a,b){
   return a - b // - assending order  + decending order
}

var sortResult1 = array12.sort(sortArray)
console.log(sortResult1);

------------------- \\ sort - obj //--------------------------


var array13 = ['b','z','a','f','e','g']

------------------- \\ Ternary Operators //--------------------------
1.

if(condition){
   // Statements in if block
}else{
   // Statements in else block
}

// in ternary operator
syntax:-
(condition)? (Statements in if block) : (Statements in else block); // valid 
       |______________(true)__________:__________(false)
2.----------->

if(condition){

}
// in ternary operator
Syntax:-
(condition)? :(Statements in if block); // not valid , throw an error

3.----------->

if(condition){
  // Statements in if block
       if(condition){
           // Statements in if block
       }else{
           // Statements in else block
       }
}else{
   // Statements in outer else block
}

//In ternary operator
Syntax:-
(condition)?(condition)?(statements in if block):(statements in else block):(statements in outer else block);
     |          |___________________^(true)__________________^(false)                       |
     |________________________>__________________(false)____________________________>_______|